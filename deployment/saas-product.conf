server {
gzip_comp_level 6;
gzip_min_length 1100;
gzip_buffers 16 8k;
gzip_proxied any;
gzip_types
    text/plain
    text/css
    text/js
    text/xml
    text/javascript
    application/javascript
    application/json
    application/xml
    application/rss+xml
    image/svg+xml;

    client_max_body_size 200M;

    access_log /var/log/nginx/saas-product-access.log;
    error_log /var/log/nginx/saas-product-error.log;

    server_name app.saas-product.com;
    listen 443 ssl;

    # This directs all "datasource" api requests to the ApiV1 Node App
    # The "datasource" api will eventually be ported to the new api.  But for now
    # it's a legacy dependency

    location ^~ /v1.0/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://localhost:58123/;
        proxy_set_header X-Forwarded-Proto https;
    }

    location ^~ /api/datasource {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://localhost:58123;
        proxy_set_header X-Forwarded-Proto https;
    }   

    # This directs all api requests to the ApiV2 Node App
    location ^~ /api/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://localhost:58128/;
        proxy_set_header X-Forwarded-Proto https;
    }    

    location ^~ /saas-product/api/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://localhost:58128/;
        proxy_set_header X-Forwarded-Proto https;
    }   

    # This allows us to use a path for our websockets without having to specify a port in our requests
    location /socket.io/ {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_pass http://localhost:58130;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

    }

    location / {
        proxy_pass http://localhost:54231;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    #location / {
    #    try_files $uri $uri/ /index.html =404;
    #    index index.html index.htm index.nginx-debian.html;
    #    root /srv/www/saas-product/app/clients/angular/dist/saas-product;
    #}

    ssl_certificate /etc/letsencrypt/live/saas-product.com-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saas-product.com-0001/privkey.pem;

}

server {
    if ($host = app.saas-product.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name app.saas-product.com;
    listen 80;
    return 404; # managed by Certbot

}

